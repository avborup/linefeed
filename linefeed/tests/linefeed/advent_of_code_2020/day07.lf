forward, backward = defaultmap([]), defaultmap([]);
for line in input().lines() {
  color, _ = line.find(r/(.*) bags contain/);
  for num, c in line.find_all(r/(\d+) (.*?) bag/) {
    forward[color].append((int(num), c));
    backward[c].append((int(num), color));
  };
};

fn dfs(graph, color, reachable) {
  num_bags = 1;
  for num, c in graph[color] {
    reachable.add(c);
    num_bags += num * dfs(graph, c, reachable);
  };
  num_bags
};

dfs(backward, "shiny gold", (reachable = set()));
part1 = reachable.len();
part2 = dfs(forward, "shiny gold", set()) - 1;

print("Part 1:", part1);
print("Part 2:", part2);
