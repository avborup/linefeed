adapters = [int(a) for a in input().lines()];
adapters = [0] + adapters.sort() + [adapters[-1] + 3];

diffs = [adapters[i] - adapters[i-1] for i in 1..adapters.len()];

# TODO: Add counter type
counter = defaultmap(0);
for d in diffs {
  # TODO: Enable += syntax for indexed assignment
  counter[d] = counter[d] + 1;
};

part1 = counter[1] * counter[3];

graph = defaultmap([]);
for a in adapters {
  for diff in 1..=3 {
    graph[a].append(a + diff) if a + diff in adapters;
  };
};

memoized fn dfs(node) {
  return 1 if node == adapters[-1];
  sum([dfs(neighbor) for neighbor in graph[node]])
};

part2 = dfs(0);

print("Part 1:", part1);
print("Part 2:", part2);
